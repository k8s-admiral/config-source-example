armada:
  # Defines a map of clusters
  clusters:
    local: # the name of the cluster
      connection: # connection reflects the kubectl cluster config
        server: https://localhost:6443
      user: local # use the local user for authentication
      type: dev/local # which cluster type config to use when creating resources in kubernetes
      ref: master # the ref to use when loading type config
  # Defines a map of users (same spec as kubectl) to be referenced in clusters
  users:
    local:
      password: 8517eccf3c4fce20aa3b8008de333eb2
      username: admin
cluster-types:
  namespaces: # map of namespaces to create
    ingress:
      type: ingress/dev # this will create a namespace called ingress
      ref: master # the ref to use when loading type config
  include: # this is a map of all the resource groups that will actually be deployed.
    haproxy-ingress: true # could be set to true or 'depsOnly' to only include the dependencies of a ResourceGroup
  resource-groups: # cluster level ResourceGroups that are available to add to include
    haproxy-ingress: # the name of the ResourceGroup
      resources: # all of the resources included in the ResourceGroup
        cluster-role: # the name of the Resource. only used to put resources in a map the {{name}} variable comes from the ResourceGroup name
          path: ClusterRole/haproxy.hbs.yml?ref=master # relative paths are assumed to be from the root of the templates directory.
        cluster-role-binding:
          path: ClusterRoleBinding/standard.hbs.yml?ref=master
namespace-types:
  resource-groups:
    default-backend:
      vars:
        ports:
          http:
            port: 80
      resources:
        service-account:
          path: ServiceAccount/standard.hbs.yml?ref=master
        deployment:
          path: Deployment/standard.hbs.yml?ref=master
          vars:
            image: gcr.io/google_containers/defaultbackend
            tag: 1.4
        service:
          path: Service/standard.hbs.yml?ref=master
    haproxy-ingress:
      vars: # variables can be set for the whole resource group and used throughout all resources
        ports: # both the service and deployment will use the ports.http(s).port variables
          http:
            port: 80
          https:
            port: 443
      dependencies:
        default-backend: 'boot' # as opposed to 'runtime' this will create the default-backend before it tries to create haproxy-ingress
      resources:
        service-account:
          path: ServiceAccount/standard.hbs.yml?ref=master
        deployment:
          path: Deployment/standard.hbs.yml?ref=master
          vars:
            image: haproxytech/kubernetes-ingress
            tag: 1.1.0 # by default all ingress namespaces use version 1.1.0
        service:
          path: Service/standard-nodeport.hbs.yml?ref=master
          vars:
            ports: # in addition to the ports.http(s).port the service also needs a nodeport
              http:
                nodePort: 30080
              https:
                nodePort: 30443
  namespace-types: # this is where we nest and override
    dev:
      include:
        haproxy-ingress: true
      resource-groups:
        haproxy-ingress:
          resources:
            deployment: # name of the resource
              vars:
                tag: 1.1.4 # dev specifically is on 1.1.4

